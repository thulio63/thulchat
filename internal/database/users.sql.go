// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkPassword = `-- name: CheckPassword :one
SELECT id
FROM users
WHERE password = $1
`

func (q *Queries) CheckPassword(ctx context.Context, password string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, checkPassword, password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1, 
    $2
)
RETURNING id, created_at, updated_at, email, password
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id
FROM users
WHERE email = $1
`

func (q *Queries) FindUser(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, findUser, email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
