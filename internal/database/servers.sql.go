// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createServer = `-- name: CreateServer :one
INSERT INTO servers (creator_id, server_id, created_at, hostname, port)
VALUES (
    $1,
    gen_random_uuid(),
    NOW(),
    $2, 
    $3
)
RETURNING creator_id, server_id, created_at, hostname, port
`

type CreateServerParams struct {
	CreatorID uuid.UUID
	Hostname  string
	Port      string
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (Server, error) {
	row := q.db.QueryRowContext(ctx, createServer, arg.CreatorID, arg.Hostname, arg.Port)
	var i Server
	err := row.Scan(
		&i.CreatorID,
		&i.ServerID,
		&i.CreatedAt,
		&i.Hostname,
		&i.Port,
	)
	return i, err
}

const deleteServer = `-- name: DeleteServer :one
DELETE FROM servers
WHERE creator_id = $1
RETURNING creator_id, server_id, created_at, hostname, port
`

func (q *Queries) DeleteServer(ctx context.Context, creatorID uuid.UUID) (Server, error) {
	row := q.db.QueryRowContext(ctx, deleteServer, creatorID)
	var i Server
	err := row.Scan(
		&i.CreatorID,
		&i.ServerID,
		&i.CreatedAt,
		&i.Hostname,
		&i.Port,
	)
	return i, err
}

const retrieveServers = `-- name: RetrieveServers :many
SELECT creator_id, server_id, hostname, port 
FROM servers
ORDER BY server_id
`

type RetrieveServersRow struct {
	CreatorID uuid.UUID
	ServerID  uuid.UUID
	Hostname  string
	Port      string
}

func (q *Queries) RetrieveServers(ctx context.Context) ([]RetrieveServersRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveServersRow
	for rows.Next() {
		var i RetrieveServersRow
		if err := rows.Scan(
			&i.CreatorID,
			&i.ServerID,
			&i.Hostname,
			&i.Port,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
